/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#ifndef JSDocument_h
#define JSDocument_h

#include "JSEventTargetNode.h"
#include <kjs/lookup.h>
#include <wtf/AlwaysInline.h>
#include "Document.h"
namespace WebCore {

class Document;

class JSDocument : public JSEventTargetNode {
    typedef JSEventTargetNode Base;
public:
    JSDocument(KJS::JSObject* prototype, Document*);
    virtual ~JSDocument();
    virtual bool getOwnPropertySlot(KJS::ExecState*, const KJS::Identifier& propertyName, KJS::PropertySlot&);
    KJS::JSValue* getValueProperty(KJS::ExecState*, int token) const;
    virtual void put(KJS::ExecState*, const KJS::Identifier& propertyName, KJS::JSValue*);
    void putValueProperty(KJS::ExecState*, int, KJS::JSValue*);
    virtual const KJS::ClassInfo* classInfo() const { return &s_info; }
    static const KJS::ClassInfo s_info;

    virtual void mark();

    static KJS::JSValue* getConstructor(KJS::ExecState*);
    enum {
        // Attributes
        DoctypeAttrNum, ImplementationAttrNum, DocumentElementAttrNum, InputEncodingAttrNum, 
        XMLEncodingAttrNum, XMLVersionAttrNum, XMLStandaloneAttrNum, DocumentURIAttrNum, 
        DefaultViewAttrNum, StyleSheetsAttrNum, TitleAttrNum, ReferrerAttrNum, 
        DomainAttrNum, URLAttrNum, CookieAttrNum, BodyAttrNum, 
        ImagesAttrNum, AppletsAttrNum, LinksAttrNum, FormsAttrNum, 
        AnchorsAttrNum, LastModifiedAttrNum, LocationAttrNum, CharsetAttrNum, 
        DefaultCharsetAttrNum, ReadyStateAttrNum, CharacterSetAttrNum, PreferredStylesheetSetAttrNum, 
        SelectedStylesheetSetAttrNum, 

        // The Constructor Attribute
        ConstructorAttrNum
    };

    // Custom attributes
    KJS::JSValue* location(KJS::ExecState*) const;
    void setLocation(KJS::ExecState*, KJS::JSValue*);
    Document* impl() const
    {
        return static_cast<Document*>(Base::impl());
    }
};

ALWAYS_INLINE bool JSDocument::getOwnPropertySlot(KJS::ExecState* exec, const KJS::Identifier& propertyName, KJS::PropertySlot& slot)
{
    return KJS::getStaticValueSlot<JSDocument, Base>(exec, s_info.staticPropHashTable, this, propertyName, slot);
}

KJS::JSValue* toJS(KJS::ExecState*, Document*);
Document* toDocument(KJS::JSValue*);

class JSDocumentPrototype : public KJS::JSObject {
public:
    static KJS::JSObject* self(KJS::ExecState*);
    virtual const KJS::ClassInfo* classInfo() const { return &s_info; }
    static const KJS::ClassInfo s_info;
    bool getOwnPropertySlot(KJS::ExecState*, const KJS::Identifier&, KJS::PropertySlot&);
    JSDocumentPrototype(KJS::ExecState* exec)
        : KJS::JSObject(JSEventTargetNodePrototype::self(exec)) { }
};

// Functions

KJS::JSValue* jsDocumentPrototypeFunctionCreateElement(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateDocumentFragment(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateTextNode(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateComment(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateCDATASection(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateProcessingInstruction(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateAttribute(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateEntityReference(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetElementsByTagName(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionImportNode(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateElementNS(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateAttributeNS(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetElementsByTagNameNS(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetElementById(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionAdoptNode(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateEvent(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateRange(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateNodeIterator(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateTreeWalker(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetOverrideStyle(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateExpression(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionCreateNSResolver(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionEvaluate(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionExecCommand(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionQueryCommandEnabled(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionQueryCommandIndeterm(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionQueryCommandState(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionQueryCommandSupported(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionQueryCommandValue(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetElementsByName(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionElementFromPoint(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetSelection(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetCSSCanvasContext(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionGetElementsByClassName(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionQuerySelector(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
KJS::JSValue* jsDocumentPrototypeFunctionQuerySelectorAll(KJS::ExecState*, KJS::JSObject*, KJS::JSValue*, const KJS::ArgList&);
} // namespace WebCore

#endif

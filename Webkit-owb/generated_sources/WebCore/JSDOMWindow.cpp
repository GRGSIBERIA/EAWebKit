/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSDOMWindow.h"

#include <wtf/GetPtr.h>

#include "BarInfo.h"
#include "CSSMutableStyleDeclaration.h"
#include "CSSRuleList.h"
#include "CSSStyleDeclaration.h"
#include "Console.h"
#include "DOMSelection.h"
#include "DOMWindow.h"
#include "Document.h"
#include "Element.h"
#include "History.h"
#include "JSAttr.h"
#include "JSBarInfo.h"
#include "JSCDATASection.h"
#include "JSCSSCharsetRule.h"
#include "JSCSSFontFaceRule.h"
#include "JSCSSImportRule.h"
#include "JSCSSMediaRule.h"
#include "JSCSSPageRule.h"
#include "JSCSSPrimitiveValue.h"
#include "JSCSSRule.h"
#include "JSCSSRuleList.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSStyleRule.h"
#include "JSCSSStyleSheet.h"
#include "JSCSSValue.h"
#include "JSCSSValueList.h"
#include "JSCSSVariablesDeclaration.h"
#include "JSCSSVariablesRule.h"
#include "JSCanvasRenderingContext2D.h"
#include "JSCharacterData.h"
#include "JSClipboard.h"
#include "JSComment.h"
#include "JSConsole.h"
#include "JSCounter.h"
#include "JSDOMBinding.h"
#include "JSDOMCoreException.h"
#include "JSDOMImplementation.h"
#include "JSDOMParser.h"
#include "JSDOMSelection.h"
#include "JSDOMWindow.h"
#include "JSDOMWindowCustom.h"
#include "JSDOMWindowShell.h"
#include "JSDocument.h"
#include "JSDocumentFragment.h"
#include "JSDocumentType.h"
#include "JSElement.h"
#include "JSEntity.h"
#include "JSEntityReference.h"
#include "JSEvent.h"
#include "JSEventException.h"
#include "JSFile.h"
#include "JSFileList.h"
#include "JSHTMLAnchorElement.h"
#include "JSHTMLAppletElement.h"
#include "JSHTMLAreaElement.h"
#include "JSHTMLBRElement.h"
#include "JSHTMLBaseElement.h"
#include "JSHTMLBaseFontElement.h"
#include "JSHTMLBlockquoteElement.h"
#include "JSHTMLBodyElement.h"
#include "JSHTMLButtonElement.h"
#include "JSHTMLCanvasElement.h"
#include "JSHTMLCollection.h"
#include "JSHTMLDListElement.h"
#include "JSHTMLDirectoryElement.h"
#include "JSHTMLDivElement.h"
#include "JSHTMLDocument.h"
#include "JSHTMLElement.h"
#include "JSHTMLEmbedElement.h"
#include "JSHTMLFieldSetElement.h"
#include "JSHTMLFontElement.h"
#include "JSHTMLFormElement.h"
#include "JSHTMLFrameElement.h"
#include "JSHTMLFrameSetElement.h"
#include "JSHTMLHRElement.h"
#include "JSHTMLHeadElement.h"
#include "JSHTMLHeadingElement.h"
#include "JSHTMLHtmlElement.h"
#include "JSHTMLIFrameElement.h"
#include "JSHTMLImageElement.h"
#include "JSHTMLInputElement.h"
#include "JSHTMLIsIndexElement.h"
#include "JSHTMLLIElement.h"
#include "JSHTMLLabelElement.h"
#include "JSHTMLLegendElement.h"
#include "JSHTMLLinkElement.h"
#include "JSHTMLMapElement.h"
#include "JSHTMLMarqueeElement.h"
#include "JSHTMLMenuElement.h"
#include "JSHTMLMetaElement.h"
#include "JSHTMLModElement.h"
#include "JSHTMLOListElement.h"
#include "JSHTMLObjectElement.h"
#include "JSHTMLOptGroupElement.h"
#include "JSHTMLOptionElement.h"
#include "JSHTMLParagraphElement.h"
#include "JSHTMLParamElement.h"
#include "JSHTMLPreElement.h"
#include "JSHTMLQuoteElement.h"
#include "JSHTMLScriptElement.h"
#include "JSHTMLSelectElement.h"
#include "JSHTMLStyleElement.h"
#include "JSHTMLTableCaptionElement.h"
#include "JSHTMLTableCellElement.h"
#include "JSHTMLTableColElement.h"
#include "JSHTMLTableElement.h"
#include "JSHTMLTableRowElement.h"
#include "JSHTMLTableSectionElement.h"
#include "JSHTMLTextAreaElement.h"
#include "JSHTMLTitleElement.h"
#include "JSHTMLUListElement.h"
#include "JSHistory.h"
#include "JSKeyboardEvent.h"
#include "JSLocation.h"
#include "JSMediaList.h"
#include "JSMessageEvent.h"
#include "JSMouseEvent.h"
#include "JSMutationEvent.h"
#include "JSNamedNodeMap.h"
#include "JSNavigator.h"
#include "JSNode.h"
#include "JSNodeFilter.h"
#include "JSNodeList.h"
#include "JSNotation.h"
#include "JSOverflowEvent.h"
#include "JSProcessingInstruction.h"
#include "JSProgressEvent.h"
#include "JSRange.h"
#include "JSRangeException.h"
#include "JSRect.h"
#include "JSScreen.h"
#include "JSStyleSheet.h"
#include "JSStyleSheetList.h"
#include "JSText.h"
#include "JSTextEvent.h"
#include "JSUIEvent.h"
#include "JSWheelEvent.h"
#include "JSXMLHttpRequestException.h"
#include "JSXMLSerializer.h"
#include "JSXPathEvaluator.h"
#include "JSXPathException.h"
#include "JSXPathResult.h"
#include "KURL.h"
#include "Location.h"
#include "Navigator.h"
#include "Screen.h"

using namespace KJS;

namespace WebCore {

/* Hash table */

static const HashTableValue JSDOMWindowTableValues[163] =
{
    { "screen", (intptr_t)JSDOMWindow::ScreenAttrNum, DontDelete|ReadOnly, 0 },
    { "history", (intptr_t)JSDOMWindow::HistoryAttrNum, DontDelete|ReadOnly, 0 },
    { "locationbar", (intptr_t)JSDOMWindow::LocationbarAttrNum, DontDelete, 0 },
    { "menubar", (intptr_t)JSDOMWindow::MenubarAttrNum, DontDelete, 0 },
    { "personalbar", (intptr_t)JSDOMWindow::PersonalbarAttrNum, DontDelete, 0 },
    { "scrollbars", (intptr_t)JSDOMWindow::ScrollbarsAttrNum, DontDelete, 0 },
    { "statusbar", (intptr_t)JSDOMWindow::StatusbarAttrNum, DontDelete, 0 },
    { "toolbar", (intptr_t)JSDOMWindow::ToolbarAttrNum, DontDelete, 0 },
    { "navigator", (intptr_t)JSDOMWindow::NavigatorAttrNum, DontDelete, 0 },
    { "clientInformation", (intptr_t)JSDOMWindow::ClientInformationAttrNum, DontDelete, 0 },
    { "location", (intptr_t)JSDOMWindow::LocationAttrNum, DontDelete, 0 },
    { "frameElement", (intptr_t)JSDOMWindow::FrameElementAttrNum, DontDelete|ReadOnly, 0 },
    { "offscreenBuffering", (intptr_t)JSDOMWindow::OffscreenBufferingAttrNum, DontDelete, 0 },
    { "outerHeight", (intptr_t)JSDOMWindow::OuterHeightAttrNum, DontDelete, 0 },
    { "outerWidth", (intptr_t)JSDOMWindow::OuterWidthAttrNum, DontDelete, 0 },
    { "innerHeight", (intptr_t)JSDOMWindow::InnerHeightAttrNum, DontDelete, 0 },
    { "innerWidth", (intptr_t)JSDOMWindow::InnerWidthAttrNum, DontDelete, 0 },
    { "screenX", (intptr_t)JSDOMWindow::ScreenXAttrNum, DontDelete, 0 },
    { "screenY", (intptr_t)JSDOMWindow::ScreenYAttrNum, DontDelete, 0 },
    { "screenLeft", (intptr_t)JSDOMWindow::ScreenLeftAttrNum, DontDelete, 0 },
    { "screenTop", (intptr_t)JSDOMWindow::ScreenTopAttrNum, DontDelete, 0 },
    { "scrollX", (intptr_t)JSDOMWindow::ScrollXAttrNum, DontDelete, 0 },
    { "scrollY", (intptr_t)JSDOMWindow::ScrollYAttrNum, DontDelete, 0 },
    { "pageXOffset", (intptr_t)JSDOMWindow::PageXOffsetAttrNum, DontDelete|ReadOnly, 0 },
    { "pageYOffset", (intptr_t)JSDOMWindow::PageYOffsetAttrNum, DontDelete|ReadOnly, 0 },
    { "closed", (intptr_t)JSDOMWindow::ClosedAttrNum, DontDelete|ReadOnly, 0 },
    { "length", (intptr_t)JSDOMWindow::LengthAttrNum, DontDelete, 0 },
    { "name", (intptr_t)JSDOMWindow::NameAttrNum, DontDelete, 0 },
    { "status", (intptr_t)JSDOMWindow::StatusAttrNum, DontDelete, 0 },
    { "defaultStatus", (intptr_t)JSDOMWindow::DefaultStatusAttrNum, DontDelete, 0 },
    { "defaultstatus", (intptr_t)JSDOMWindow::DefaultstatusAttrNum, DontDelete, 0 },
    { "self", (intptr_t)JSDOMWindow::SelfAttrNum, DontDelete, 0 },
    { "window", (intptr_t)JSDOMWindow::WindowAttrNum, DontDelete|ReadOnly, 0 },
    { "frames", (intptr_t)JSDOMWindow::FramesAttrNum, DontDelete, 0 },
    { "opener", (intptr_t)JSDOMWindow::OpenerAttrNum, DontDelete, 0 },
    { "parent", (intptr_t)JSDOMWindow::ParentAttrNum, DontDelete, 0 },
    { "top", (intptr_t)JSDOMWindow::TopAttrNum, DontDelete, 0 },
    { "document", (intptr_t)JSDOMWindow::DocumentAttrNum, DontDelete|ReadOnly, 0 },
    { "devicePixelRatio", (intptr_t)JSDOMWindow::DevicePixelRatioAttrNum, DontDelete, 0 },
    { "console", (intptr_t)JSDOMWindow::ConsoleAttrNum, DontDelete, 0 },
    { "StyleSheet", (intptr_t)JSDOMWindow::StyleSheetConstructorAttrNum, DontDelete, 0 },
    { "CSSStyleSheet", (intptr_t)JSDOMWindow::CSSStyleSheetConstructorAttrNum, DontDelete, 0 },
    { "CSSValue", (intptr_t)JSDOMWindow::CSSValueConstructorAttrNum, DontDelete, 0 },
    { "CSSPrimitiveValue", (intptr_t)JSDOMWindow::CSSPrimitiveValueConstructorAttrNum, DontDelete, 0 },
    { "CSSValueList", (intptr_t)JSDOMWindow::CSSValueListConstructorAttrNum, DontDelete, 0 },
    { "CSSRule", (intptr_t)JSDOMWindow::CSSRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSCharsetRule", (intptr_t)JSDOMWindow::CSSCharsetRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSFontFaceRule", (intptr_t)JSDOMWindow::CSSFontFaceRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSImportRule", (intptr_t)JSDOMWindow::CSSImportRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSMediaRule", (intptr_t)JSDOMWindow::CSSMediaRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSPageRule", (intptr_t)JSDOMWindow::CSSPageRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSStyleRule", (intptr_t)JSDOMWindow::CSSStyleRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSVariablesRule", (intptr_t)JSDOMWindow::CSSVariablesRuleConstructorAttrNum, DontDelete, 0 },
    { "CSSVariablesDeclaration", (intptr_t)JSDOMWindow::CSSVariablesDeclarationConstructorAttrNum, DontDelete, 0 },
    { "CSSStyleDeclaration", (intptr_t)JSDOMWindow::CSSStyleDeclarationConstructorAttrNum, DontDelete, 0 },
    { "MediaList", (intptr_t)JSDOMWindow::MediaListConstructorAttrNum, DontDelete, 0 },
    { "Counter", (intptr_t)JSDOMWindow::CounterConstructorAttrNum, DontDelete, 0 },
    { "CSSRuleList", (intptr_t)JSDOMWindow::CSSRuleListConstructorAttrNum, DontDelete, 0 },
    { "Rect", (intptr_t)JSDOMWindow::RectConstructorAttrNum, DontDelete, 0 },
    { "StyleSheetList", (intptr_t)JSDOMWindow::StyleSheetListConstructorAttrNum, DontDelete, 0 },
    { "DOMException", (intptr_t)JSDOMWindow::DOMExceptionConstructorAttrNum, DontDelete, 0 },
    { "DOMImplementation", (intptr_t)JSDOMWindow::DOMImplementationConstructorAttrNum, DontDelete, 0 },
    { "DocumentFragment", (intptr_t)JSDOMWindow::DocumentFragmentConstructorAttrNum, DontDelete, 0 },
    { "Document", (intptr_t)JSDOMWindow::DocumentConstructorAttrNum, DontDelete, 0 },
    { "Node", (intptr_t)JSDOMWindow::NodeConstructorAttrNum, DontDelete, 0 },
    { "NodeList", (intptr_t)JSDOMWindow::NodeListConstructorAttrNum, DontDelete, 0 },
    { "NamedNodeMap", (intptr_t)JSDOMWindow::NamedNodeMapConstructorAttrNum, DontDelete, 0 },
    { "CharacterData", (intptr_t)JSDOMWindow::CharacterDataConstructorAttrNum, DontDelete, 0 },
    { "Attr", (intptr_t)JSDOMWindow::AttrConstructorAttrNum, DontDelete, 0 },
    { "Element", (intptr_t)JSDOMWindow::ElementConstructorAttrNum, DontDelete, 0 },
    { "Text", (intptr_t)JSDOMWindow::TextConstructorAttrNum, DontDelete, 0 },
    { "Comment", (intptr_t)JSDOMWindow::CommentConstructorAttrNum, DontDelete, 0 },
    { "CDATASection", (intptr_t)JSDOMWindow::CDATASectionConstructorAttrNum, DontDelete, 0 },
    { "DocumentType", (intptr_t)JSDOMWindow::DocumentTypeConstructorAttrNum, DontDelete, 0 },
    { "Notation", (intptr_t)JSDOMWindow::NotationConstructorAttrNum, DontDelete, 0 },
    { "Entity", (intptr_t)JSDOMWindow::EntityConstructorAttrNum, DontDelete, 0 },
    { "EntityReference", (intptr_t)JSDOMWindow::EntityReferenceConstructorAttrNum, DontDelete, 0 },
    { "ProcessingInstruction", (intptr_t)JSDOMWindow::ProcessingInstructionConstructorAttrNum, DontDelete, 0 },
    { "HTMLDocument", (intptr_t)JSDOMWindow::HTMLDocumentConstructorAttrNum, DontDelete, 0 },
    { "HTMLElement", (intptr_t)JSDOMWindow::HTMLElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLAnchorElement", (intptr_t)JSDOMWindow::HTMLAnchorElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLAppletElement", (intptr_t)JSDOMWindow::HTMLAppletElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLAreaElement", (intptr_t)JSDOMWindow::HTMLAreaElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLBRElement", (intptr_t)JSDOMWindow::HTMLBRElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLBaseElement", (intptr_t)JSDOMWindow::HTMLBaseElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLBaseFontElement", (intptr_t)JSDOMWindow::HTMLBaseFontElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLBlockquoteElement", (intptr_t)JSDOMWindow::HTMLBlockquoteElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLBodyElement", (intptr_t)JSDOMWindow::HTMLBodyElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLButtonElement", (intptr_t)JSDOMWindow::HTMLButtonElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLCanvasElement", (intptr_t)JSDOMWindow::HTMLCanvasElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLDListElement", (intptr_t)JSDOMWindow::HTMLDListElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLDirectoryElement", (intptr_t)JSDOMWindow::HTMLDirectoryElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLDivElement", (intptr_t)JSDOMWindow::HTMLDivElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLEmbedElement", (intptr_t)JSDOMWindow::HTMLEmbedElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLFieldSetElement", (intptr_t)JSDOMWindow::HTMLFieldSetElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLFontElement", (intptr_t)JSDOMWindow::HTMLFontElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLFormElement", (intptr_t)JSDOMWindow::HTMLFormElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLFrameElement", (intptr_t)JSDOMWindow::HTMLFrameElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLFrameSetElement", (intptr_t)JSDOMWindow::HTMLFrameSetElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLHRElement", (intptr_t)JSDOMWindow::HTMLHRElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLHeadElement", (intptr_t)JSDOMWindow::HTMLHeadElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLHeadingElement", (intptr_t)JSDOMWindow::HTMLHeadingElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLHtmlElement", (intptr_t)JSDOMWindow::HTMLHtmlElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLIFrameElement", (intptr_t)JSDOMWindow::HTMLIFrameElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLImageElement", (intptr_t)JSDOMWindow::HTMLImageElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLInputElement", (intptr_t)JSDOMWindow::HTMLInputElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLIsIndexElement", (intptr_t)JSDOMWindow::HTMLIsIndexElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLLIElement", (intptr_t)JSDOMWindow::HTMLLIElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLLabelElement", (intptr_t)JSDOMWindow::HTMLLabelElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLLegendElement", (intptr_t)JSDOMWindow::HTMLLegendElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLLinkElement", (intptr_t)JSDOMWindow::HTMLLinkElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLMapElement", (intptr_t)JSDOMWindow::HTMLMapElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLMarqueeElement", (intptr_t)JSDOMWindow::HTMLMarqueeElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLMenuElement", (intptr_t)JSDOMWindow::HTMLMenuElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLMetaElement", (intptr_t)JSDOMWindow::HTMLMetaElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLModElement", (intptr_t)JSDOMWindow::HTMLModElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLOListElement", (intptr_t)JSDOMWindow::HTMLOListElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLObjectElement", (intptr_t)JSDOMWindow::HTMLObjectElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLOptGroupElement", (intptr_t)JSDOMWindow::HTMLOptGroupElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLOptionElement", (intptr_t)JSDOMWindow::HTMLOptionElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLParagraphElement", (intptr_t)JSDOMWindow::HTMLParagraphElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLParamElement", (intptr_t)JSDOMWindow::HTMLParamElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLPreElement", (intptr_t)JSDOMWindow::HTMLPreElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLQuoteElement", (intptr_t)JSDOMWindow::HTMLQuoteElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLScriptElement", (intptr_t)JSDOMWindow::HTMLScriptElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLSelectElement", (intptr_t)JSDOMWindow::HTMLSelectElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLStyleElement", (intptr_t)JSDOMWindow::HTMLStyleElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTableCaptionElement", (intptr_t)JSDOMWindow::HTMLTableCaptionElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTableCellElement", (intptr_t)JSDOMWindow::HTMLTableCellElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTableColElement", (intptr_t)JSDOMWindow::HTMLTableColElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTableElement", (intptr_t)JSDOMWindow::HTMLTableElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTableRowElement", (intptr_t)JSDOMWindow::HTMLTableRowElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTableSectionElement", (intptr_t)JSDOMWindow::HTMLTableSectionElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTextAreaElement", (intptr_t)JSDOMWindow::HTMLTextAreaElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLTitleElement", (intptr_t)JSDOMWindow::HTMLTitleElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLUListElement", (intptr_t)JSDOMWindow::HTMLUListElementConstructorAttrNum, DontDelete, 0 },
    { "HTMLCollection", (intptr_t)JSDOMWindow::HTMLCollectionConstructorAttrNum, DontDelete, 0 },
    { "CanvasRenderingContext2D", (intptr_t)JSDOMWindow::CanvasRenderingContext2DConstructorAttrNum, DontDelete, 0 },
    { "Event", (intptr_t)JSDOMWindow::EventConstructorAttrNum, DontDelete, 0 },
    { "KeyboardEvent", (intptr_t)JSDOMWindow::KeyboardEventConstructorAttrNum, DontDelete, 0 },
    { "MouseEvent", (intptr_t)JSDOMWindow::MouseEventConstructorAttrNum, DontDelete, 0 },
    { "MutationEvent", (intptr_t)JSDOMWindow::MutationEventConstructorAttrNum, DontDelete, 0 },
    { "OverflowEvent", (intptr_t)JSDOMWindow::OverflowEventConstructorAttrNum, DontDelete, 0 },
    { "ProgressEvent", (intptr_t)JSDOMWindow::ProgressEventConstructorAttrNum, DontDelete, 0 },
    { "TextEvent", (intptr_t)JSDOMWindow::TextEventConstructorAttrNum, DontDelete, 0 },
    { "UIEvent", (intptr_t)JSDOMWindow::UIEventConstructorAttrNum, DontDelete, 0 },
    { "WheelEvent", (intptr_t)JSDOMWindow::WheelEventConstructorAttrNum, DontDelete, 0 },
    { "MessageEvent", (intptr_t)JSDOMWindow::MessageEventConstructorAttrNum, DontDelete, 0 },
    { "EventException", (intptr_t)JSDOMWindow::EventExceptionConstructorAttrNum, DontDelete, 0 },
    { "Clipboard", (intptr_t)JSDOMWindow::ClipboardConstructorAttrNum, DontDelete, 0 },
    { "File", (intptr_t)JSDOMWindow::FileConstructorAttrNum, DontDelete, 0 },
    { "FileList", (intptr_t)JSDOMWindow::FileListConstructorAttrNum, DontDelete, 0 },
    { "NodeFilter", (intptr_t)JSDOMWindow::NodeFilterConstructorAttrNum, DontDelete, 0 },
    { "Range", (intptr_t)JSDOMWindow::RangeConstructorAttrNum, DontDelete, 0 },
    { "RangeException", (intptr_t)JSDOMWindow::RangeExceptionConstructorAttrNum, DontDelete, 0 },
    { "XMLDocument", (intptr_t)JSDOMWindow::XMLDocumentConstructorAttrNum, DontDelete, 0 },
    { "DOMParser", (intptr_t)JSDOMWindow::DOMParserConstructorAttrNum, DontDelete, 0 },
    { "XMLSerializer", (intptr_t)JSDOMWindow::XMLSerializerConstructorAttrNum, DontDelete, 0 },
    { "XMLHttpRequestException", (intptr_t)JSDOMWindow::XMLHttpRequestExceptionConstructorAttrNum, DontDelete, 0 },
    { "XPathEvaluator", (intptr_t)JSDOMWindow::XPathEvaluatorConstructorAttrNum, DontDelete, 0 },
    { "XPathResult", (intptr_t)JSDOMWindow::XPathResultConstructorAttrNum, DontDelete, 0 },
    { "XPathException", (intptr_t)JSDOMWindow::XPathExceptionConstructorAttrNum, DontDelete, 0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSDOMWindowTable = { 16383, JSDOMWindowTableValues, 0 };

/* Hash table for prototype */

static const HashTableValue JSDOMWindowPrototypeTableValues[21] =
{
    { "getSelection", (intptr_t)jsDOMWindowPrototypeFunctionGetSelection, DontDelete|Function, 0 },
    { "focus", (intptr_t)jsDOMWindowPrototypeFunctionFocus, DontDelete|Function, 0 },
    { "blur", (intptr_t)jsDOMWindowPrototypeFunctionBlur, DontDelete|Function, 0 },
    { "close", (intptr_t)jsDOMWindowPrototypeFunctionClose, DontDelete|Function, 0 },
    { "print", (intptr_t)jsDOMWindowPrototypeFunctionPrint, DontDelete|Function, 0 },
    { "stop", (intptr_t)jsDOMWindowPrototypeFunctionStop, DontDelete|Function, 0 },
    { "alert", (intptr_t)jsDOMWindowPrototypeFunctionAlert, DontDelete|Function, 1 },
    { "confirm", (intptr_t)jsDOMWindowPrototypeFunctionConfirm, DontDelete|Function, 1 },
    { "prompt", (intptr_t)jsDOMWindowPrototypeFunctionPrompt, DontDelete|Function, 2 },
    { "find", (intptr_t)jsDOMWindowPrototypeFunctionFind, DontDelete|Function, 7 },
    { "scrollBy", (intptr_t)jsDOMWindowPrototypeFunctionScrollBy, DontDelete|Function, 2 },
    { "scrollTo", (intptr_t)jsDOMWindowPrototypeFunctionScrollTo, DontDelete|Function, 2 },
    { "scroll", (intptr_t)jsDOMWindowPrototypeFunctionScroll, DontDelete|Function, 2 },
    { "moveBy", (intptr_t)jsDOMWindowPrototypeFunctionMoveBy, DontDelete|Function, 2 },
    { "moveTo", (intptr_t)jsDOMWindowPrototypeFunctionMoveTo, DontDelete|Function, 2 },
    { "resizeBy", (intptr_t)jsDOMWindowPrototypeFunctionResizeBy, DontDelete|Function, 2 },
    { "resizeTo", (intptr_t)jsDOMWindowPrototypeFunctionResizeTo, DontDelete|Function, 2 },
    { "getComputedStyle", (intptr_t)jsDOMWindowPrototypeFunctionGetComputedStyle, DontDelete|Function, 2 },
    { "getMatchedCSSRules", (intptr_t)jsDOMWindowPrototypeFunctionGetMatchedCSSRules, DontDelete|Function, 3 },
    { "postMessage", (intptr_t)jsDOMWindowPrototypeFunctionPostMessage, DontDelete|Function, 2 },
    { 0, 0, 0, 0 }
};

static const HashTable JSDOMWindowPrototypeTable = { 255, JSDOMWindowPrototypeTableValues, 0 };

const ClassInfo JSDOMWindowPrototype::s_info = { "DOMWindowPrototype", 0, &JSDOMWindowPrototypeTable, 0 };

JSObject* JSDOMWindowPrototype::self()
{
    return new JSDOMWindowPrototype();
}

void* JSDOMWindowPrototype::operator new(size_t size)
{
    return JSGlobalData::threadInstance().heap->allocate(size);
}

bool JSDOMWindowPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSDOMWindowPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSDOMWindow::s_info = { "DOMWindow", &JSDOMWindowBase::s_info, &JSDOMWindowTable , 0 };

JSDOMWindow::JSDOMWindow(DOMWindow* impl, JSDOMWindowShell* shell)
    : JSDOMWindowBase(JSDOMWindowPrototype::self(), impl, shell)
{
}

bool JSDOMWindow::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    if (customGetOwnPropertySlot(exec, propertyName, slot))
        return true;
    return getStaticValueSlot<JSDOMWindow, Base>(exec, &JSDOMWindowTable, this, propertyName, slot);
}

JSValue* JSDOMWindow::getValueProperty(ExecState* exec, int token) const
{
    switch (token) {
    case ScreenAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->screen()));
    }
    case HistoryAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->history()));
    }
    case LocationbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->locationbar()));
    }
    case MenubarAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->menubar()));
    }
    case PersonalbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->personalbar()));
    }
    case ScrollbarsAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->scrollbars()));
    }
    case StatusbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->statusbar()));
    }
    case ToolbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->toolbar()));
    }
    case NavigatorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->navigator()));
    }
    case ClientInformationAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->clientInformation()));
    }
    case LocationAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->location()));
    }
    case FrameElementAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return checkNodeSecurity(exec, imp->frameElement()) ? toJS(exec, WTF::getPtr(imp->frameElement())) : jsUndefined();
    }
    case OffscreenBufferingAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsBoolean(imp->offscreenBuffering());
    }
    case OuterHeightAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->outerHeight());
    }
    case OuterWidthAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->outerWidth());
    }
    case InnerHeightAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->innerHeight());
    }
    case InnerWidthAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->innerWidth());
    }
    case ScreenXAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->screenX());
    }
    case ScreenYAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->screenY());
    }
    case ScreenLeftAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->screenLeft());
    }
    case ScreenTopAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->screenTop());
    }
    case ScrollXAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->scrollX());
    }
    case ScrollYAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->scrollY());
    }
    case PageXOffsetAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->pageXOffset());
    }
    case PageYOffsetAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->pageYOffset());
    }
    case ClosedAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsBoolean(imp->closed());
    }
    case LengthAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->length());
    }
    case NameAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsString(exec, imp->name());
    }
    case StatusAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsString(exec, imp->status());
    }
    case DefaultStatusAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsString(exec, imp->defaultStatus());
    }
    case DefaultstatusAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsString(exec, imp->defaultstatus());
    }
    case SelfAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->self()));
    }
    case WindowAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->window()));
    }
    case FramesAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->frames()));
    }
    case OpenerAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->opener()));
    }
    case ParentAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->parent()));
    }
    case TopAttrNum: {
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->top()));
    }
    case DocumentAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->document()));
    }
    case DevicePixelRatioAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return jsNumber(exec, imp->devicePixelRatio());
    }
    case ConsoleAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        return toJS(exec, WTF::getPtr(imp->console()));
    }
    case StyleSheetConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSStyleSheet::getConstructor(exec);
    }
    case CSSStyleSheetConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSStyleSheet::getConstructor(exec);
    }
    case CSSValueConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSValue::getConstructor(exec);
    }
    case CSSPrimitiveValueConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSPrimitiveValue::getConstructor(exec);
    }
    case CSSValueListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSValueList::getConstructor(exec);
    }
    case CSSRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSRule::getConstructor(exec);
    }
    case CSSCharsetRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSCharsetRule::getConstructor(exec);
    }
    case CSSFontFaceRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSFontFaceRule::getConstructor(exec);
    }
    case CSSImportRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSImportRule::getConstructor(exec);
    }
    case CSSMediaRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSMediaRule::getConstructor(exec);
    }
    case CSSPageRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSPageRule::getConstructor(exec);
    }
    case CSSStyleRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSStyleRule::getConstructor(exec);
    }
    case CSSVariablesRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSVariablesRule::getConstructor(exec);
    }
    case CSSVariablesDeclarationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSVariablesDeclaration::getConstructor(exec);
    }
    case CSSStyleDeclarationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSStyleDeclaration::getConstructor(exec);
    }
    case MediaListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSMediaList::getConstructor(exec);
    }
    case CounterConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCounter::getConstructor(exec);
    }
    case CSSRuleListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCSSRuleList::getConstructor(exec);
    }
    case RectConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSRect::getConstructor(exec);
    }
    case StyleSheetListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSStyleSheetList::getConstructor(exec);
    }
    case DOMExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSDOMCoreException::getConstructor(exec);
    }
    case DOMImplementationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSDOMImplementation::getConstructor(exec);
    }
    case DocumentFragmentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSDocumentFragment::getConstructor(exec);
    }
    case DocumentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSDocument::getConstructor(exec);
    }
    case NodeConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSNode::getConstructor(exec);
    }
    case NodeListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSNodeList::getConstructor(exec);
    }
    case NamedNodeMapConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSNamedNodeMap::getConstructor(exec);
    }
    case CharacterDataConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCharacterData::getConstructor(exec);
    }
    case AttrConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSAttr::getConstructor(exec);
    }
    case ElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSElement::getConstructor(exec);
    }
    case TextConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSText::getConstructor(exec);
    }
    case CommentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSComment::getConstructor(exec);
    }
    case CDATASectionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCDATASection::getConstructor(exec);
    }
    case DocumentTypeConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSDocumentType::getConstructor(exec);
    }
    case NotationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSNotation::getConstructor(exec);
    }
    case EntityConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSEntity::getConstructor(exec);
    }
    case EntityReferenceConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSEntityReference::getConstructor(exec);
    }
    case ProcessingInstructionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSProcessingInstruction::getConstructor(exec);
    }
    case HTMLDocumentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLDocument::getConstructor(exec);
    }
    case HTMLElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLElement::getConstructor(exec);
    }
    case HTMLAnchorElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLAnchorElement::getConstructor(exec);
    }
    case HTMLAppletElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLAppletElement::getConstructor(exec);
    }
    case HTMLAreaElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLAreaElement::getConstructor(exec);
    }
    case HTMLBRElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLBRElement::getConstructor(exec);
    }
    case HTMLBaseElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLBaseElement::getConstructor(exec);
    }
    case HTMLBaseFontElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLBaseFontElement::getConstructor(exec);
    }
    case HTMLBlockquoteElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLBlockquoteElement::getConstructor(exec);
    }
    case HTMLBodyElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLBodyElement::getConstructor(exec);
    }
    case HTMLButtonElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLButtonElement::getConstructor(exec);
    }
    case HTMLCanvasElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLCanvasElement::getConstructor(exec);
    }
    case HTMLDListElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLDListElement::getConstructor(exec);
    }
    case HTMLDirectoryElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLDirectoryElement::getConstructor(exec);
    }
    case HTMLDivElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLDivElement::getConstructor(exec);
    }
    case HTMLEmbedElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLEmbedElement::getConstructor(exec);
    }
    case HTMLFieldSetElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLFieldSetElement::getConstructor(exec);
    }
    case HTMLFontElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLFontElement::getConstructor(exec);
    }
    case HTMLFormElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLFormElement::getConstructor(exec);
    }
    case HTMLFrameElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLFrameElement::getConstructor(exec);
    }
    case HTMLFrameSetElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLFrameSetElement::getConstructor(exec);
    }
    case HTMLHRElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLHRElement::getConstructor(exec);
    }
    case HTMLHeadElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLHeadElement::getConstructor(exec);
    }
    case HTMLHeadingElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLHeadingElement::getConstructor(exec);
    }
    case HTMLHtmlElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLHtmlElement::getConstructor(exec);
    }
    case HTMLIFrameElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLIFrameElement::getConstructor(exec);
    }
    case HTMLImageElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLImageElement::getConstructor(exec);
    }
    case HTMLInputElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLInputElement::getConstructor(exec);
    }
    case HTMLIsIndexElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLIsIndexElement::getConstructor(exec);
    }
    case HTMLLIElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLLIElement::getConstructor(exec);
    }
    case HTMLLabelElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLLabelElement::getConstructor(exec);
    }
    case HTMLLegendElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLLegendElement::getConstructor(exec);
    }
    case HTMLLinkElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLLinkElement::getConstructor(exec);
    }
    case HTMLMapElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLMapElement::getConstructor(exec);
    }
    case HTMLMarqueeElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLMarqueeElement::getConstructor(exec);
    }
    case HTMLMenuElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLMenuElement::getConstructor(exec);
    }
    case HTMLMetaElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLMetaElement::getConstructor(exec);
    }
    case HTMLModElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLModElement::getConstructor(exec);
    }
    case HTMLOListElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLOListElement::getConstructor(exec);
    }
    case HTMLObjectElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLObjectElement::getConstructor(exec);
    }
    case HTMLOptGroupElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLOptGroupElement::getConstructor(exec);
    }
    case HTMLOptionElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLOptionElement::getConstructor(exec);
    }
    case HTMLParagraphElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLParagraphElement::getConstructor(exec);
    }
    case HTMLParamElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLParamElement::getConstructor(exec);
    }
    case HTMLPreElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLPreElement::getConstructor(exec);
    }
    case HTMLQuoteElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLQuoteElement::getConstructor(exec);
    }
    case HTMLScriptElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLScriptElement::getConstructor(exec);
    }
    case HTMLSelectElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLSelectElement::getConstructor(exec);
    }
    case HTMLStyleElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLStyleElement::getConstructor(exec);
    }
    case HTMLTableCaptionElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTableCaptionElement::getConstructor(exec);
    }
    case HTMLTableCellElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTableCellElement::getConstructor(exec);
    }
    case HTMLTableColElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTableColElement::getConstructor(exec);
    }
    case HTMLTableElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTableElement::getConstructor(exec);
    }
    case HTMLTableRowElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTableRowElement::getConstructor(exec);
    }
    case HTMLTableSectionElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTableSectionElement::getConstructor(exec);
    }
    case HTMLTextAreaElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTextAreaElement::getConstructor(exec);
    }
    case HTMLTitleElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLTitleElement::getConstructor(exec);
    }
    case HTMLUListElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLUListElement::getConstructor(exec);
    }
    case HTMLCollectionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSHTMLCollection::getConstructor(exec);
    }
    case CanvasRenderingContext2DConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSCanvasRenderingContext2D::getConstructor(exec);
    }
    case EventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSEvent::getConstructor(exec);
    }
    case KeyboardEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSKeyboardEvent::getConstructor(exec);
    }
    case MouseEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSMouseEvent::getConstructor(exec);
    }
    case MutationEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSMutationEvent::getConstructor(exec);
    }
    case OverflowEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSOverflowEvent::getConstructor(exec);
    }
    case ProgressEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSProgressEvent::getConstructor(exec);
    }
    case TextEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSTextEvent::getConstructor(exec);
    }
    case UIEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSUIEvent::getConstructor(exec);
    }
    case WheelEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSWheelEvent::getConstructor(exec);
    }
    case MessageEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSMessageEvent::getConstructor(exec);
    }
    case EventExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSEventException::getConstructor(exec);
    }
    case ClipboardConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSClipboard::getConstructor(exec);
    }
    case FileConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSFile::getConstructor(exec);
    }
    case FileListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSFileList::getConstructor(exec);
    }
    case NodeFilterConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSNodeFilter::getConstructor(exec);
    }
    case RangeConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSRange::getConstructor(exec);
    }
    case RangeExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSRangeException::getConstructor(exec);
    }
    case XMLDocumentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSDocument::getConstructor(exec);
    }
    case DOMParserConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSDOMParser::getConstructor(exec);
    }
    case XMLSerializerConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSXMLSerializer::getConstructor(exec);
    }
    case XMLHttpRequestExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSXMLHttpRequestException::getConstructor(exec);
    }
    case XPathEvaluatorConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSXPathEvaluator::getConstructor(exec);
    }
    case XPathResultConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSXPathResult::getConstructor(exec);
    }
    case XPathExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return jsUndefined();
        return JSXPathException::getConstructor(exec);
    }
    }
    return 0;
}

void JSDOMWindow::put(ExecState* exec, const Identifier& propertyName, JSValue* value)
{
    if (customPut(exec, propertyName, value))
        return;
    lookupPut<JSDOMWindow, Base>(exec, propertyName, value, &JSDOMWindowTable, this);
}

void JSDOMWindow::putValueProperty(ExecState* exec, int token, JSValue* value)
{
    switch (token) {
    case LocationbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "locationbar"), value);
        break;
    }
    case MenubarAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "menubar"), value);
        break;
    }
    case PersonalbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "personalbar"), value);
        break;
    }
    case ScrollbarsAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "scrollbars"), value);
        break;
    }
    case StatusbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "statusbar"), value);
        break;
    }
    case ToolbarAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "toolbar"), value);
        break;
    }
    case NavigatorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "navigator"), value);
        break;
    }
    case ClientInformationAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "clientInformation"), value);
        break;
    }
    case LocationAttrNum: {
        setLocation(exec, value);
        break;
    }
    case OffscreenBufferingAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "offscreenBuffering"), value);
        break;
    }
    case OuterHeightAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "outerHeight"), value);
        break;
    }
    case OuterWidthAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "outerWidth"), value);
        break;
    }
    case InnerHeightAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "innerHeight"), value);
        break;
    }
    case InnerWidthAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "innerWidth"), value);
        break;
    }
    case ScreenXAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "screenX"), value);
        break;
    }
    case ScreenYAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "screenY"), value);
        break;
    }
    case ScreenLeftAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "screenLeft"), value);
        break;
    }
    case ScreenTopAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "screenTop"), value);
        break;
    }
    case ScrollXAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "scrollX"), value);
        break;
    }
    case ScrollYAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "scrollY"), value);
        break;
    }
    case LengthAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "length"), value);
        break;
    }
    case NameAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        imp->setName(value->toString(exec));
        break;
    }
    case StatusAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        imp->setStatus(value->toString(exec));
        break;
    }
    case DefaultStatusAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        imp->setDefaultStatus(value->toString(exec));
        break;
    }
    case DefaultstatusAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        DOMWindow* imp = static_cast<DOMWindow*>(impl());
        imp->setDefaultstatus(value->toString(exec));
        break;
    }
    case SelfAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "self"), value);
        break;
    }
    case FramesAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "frames"), value);
        break;
    }
    case OpenerAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "opener"), value);
        break;
    }
    case ParentAttrNum: {
        putDirect(Identifier(exec, "parent"), value);
        break;
    }
    case TopAttrNum: {
        putDirect(Identifier(exec, "top"), value);
        break;
    }
    case DevicePixelRatioAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "devicePixelRatio"), value);
        break;
    }
    case ConsoleAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        putDirect(Identifier(exec, "console"), value);
        break;
    }
    case StyleSheetConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "StyleSheet"), value);
        break;
    }
    case CSSStyleSheetConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSStyleSheet"), value);
        break;
    }
    case CSSValueConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSValue"), value);
        break;
    }
    case CSSPrimitiveValueConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSPrimitiveValue"), value);
        break;
    }
    case CSSValueListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSValueList"), value);
        break;
    }
    case CSSRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSRule"), value);
        break;
    }
    case CSSCharsetRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSCharsetRule"), value);
        break;
    }
    case CSSFontFaceRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSFontFaceRule"), value);
        break;
    }
    case CSSImportRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSImportRule"), value);
        break;
    }
    case CSSMediaRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSMediaRule"), value);
        break;
    }
    case CSSPageRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSPageRule"), value);
        break;
    }
    case CSSStyleRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSStyleRule"), value);
        break;
    }
    case CSSVariablesRuleConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSVariablesRule"), value);
        break;
    }
    case CSSVariablesDeclarationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSVariablesDeclaration"), value);
        break;
    }
    case CSSStyleDeclarationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSStyleDeclaration"), value);
        break;
    }
    case MediaListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "MediaList"), value);
        break;
    }
    case CounterConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Counter"), value);
        break;
    }
    case CSSRuleListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CSSRuleList"), value);
        break;
    }
    case RectConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Rect"), value);
        break;
    }
    case StyleSheetListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "StyleSheetList"), value);
        break;
    }
    case DOMExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "DOMException"), value);
        break;
    }
    case DOMImplementationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "DOMImplementation"), value);
        break;
    }
    case DocumentFragmentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "DocumentFragment"), value);
        break;
    }
    case DocumentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Document"), value);
        break;
    }
    case NodeConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Node"), value);
        break;
    }
    case NodeListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "NodeList"), value);
        break;
    }
    case NamedNodeMapConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "NamedNodeMap"), value);
        break;
    }
    case CharacterDataConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CharacterData"), value);
        break;
    }
    case AttrConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Attr"), value);
        break;
    }
    case ElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Element"), value);
        break;
    }
    case TextConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Text"), value);
        break;
    }
    case CommentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Comment"), value);
        break;
    }
    case CDATASectionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CDATASection"), value);
        break;
    }
    case DocumentTypeConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "DocumentType"), value);
        break;
    }
    case NotationConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Notation"), value);
        break;
    }
    case EntityConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Entity"), value);
        break;
    }
    case EntityReferenceConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "EntityReference"), value);
        break;
    }
    case ProcessingInstructionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "ProcessingInstruction"), value);
        break;
    }
    case HTMLDocumentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLDocument"), value);
        break;
    }
    case HTMLElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLElement"), value);
        break;
    }
    case HTMLAnchorElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLAnchorElement"), value);
        break;
    }
    case HTMLAppletElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLAppletElement"), value);
        break;
    }
    case HTMLAreaElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLAreaElement"), value);
        break;
    }
    case HTMLBRElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLBRElement"), value);
        break;
    }
    case HTMLBaseElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLBaseElement"), value);
        break;
    }
    case HTMLBaseFontElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLBaseFontElement"), value);
        break;
    }
    case HTMLBlockquoteElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLBlockquoteElement"), value);
        break;
    }
    case HTMLBodyElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLBodyElement"), value);
        break;
    }
    case HTMLButtonElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLButtonElement"), value);
        break;
    }
    case HTMLCanvasElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLCanvasElement"), value);
        break;
    }
    case HTMLDListElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLDListElement"), value);
        break;
    }
    case HTMLDirectoryElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLDirectoryElement"), value);
        break;
    }
    case HTMLDivElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLDivElement"), value);
        break;
    }
    case HTMLEmbedElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLEmbedElement"), value);
        break;
    }
    case HTMLFieldSetElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLFieldSetElement"), value);
        break;
    }
    case HTMLFontElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLFontElement"), value);
        break;
    }
    case HTMLFormElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLFormElement"), value);
        break;
    }
    case HTMLFrameElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLFrameElement"), value);
        break;
    }
    case HTMLFrameSetElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLFrameSetElement"), value);
        break;
    }
    case HTMLHRElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLHRElement"), value);
        break;
    }
    case HTMLHeadElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLHeadElement"), value);
        break;
    }
    case HTMLHeadingElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLHeadingElement"), value);
        break;
    }
    case HTMLHtmlElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLHtmlElement"), value);
        break;
    }
    case HTMLIFrameElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLIFrameElement"), value);
        break;
    }
    case HTMLImageElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLImageElement"), value);
        break;
    }
    case HTMLInputElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLInputElement"), value);
        break;
    }
    case HTMLIsIndexElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLIsIndexElement"), value);
        break;
    }
    case HTMLLIElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLLIElement"), value);
        break;
    }
    case HTMLLabelElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLLabelElement"), value);
        break;
    }
    case HTMLLegendElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLLegendElement"), value);
        break;
    }
    case HTMLLinkElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLLinkElement"), value);
        break;
    }
    case HTMLMapElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLMapElement"), value);
        break;
    }
    case HTMLMarqueeElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLMarqueeElement"), value);
        break;
    }
    case HTMLMenuElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLMenuElement"), value);
        break;
    }
    case HTMLMetaElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLMetaElement"), value);
        break;
    }
    case HTMLModElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLModElement"), value);
        break;
    }
    case HTMLOListElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLOListElement"), value);
        break;
    }
    case HTMLObjectElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLObjectElement"), value);
        break;
    }
    case HTMLOptGroupElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLOptGroupElement"), value);
        break;
    }
    case HTMLOptionElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLOptionElement"), value);
        break;
    }
    case HTMLParagraphElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLParagraphElement"), value);
        break;
    }
    case HTMLParamElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLParamElement"), value);
        break;
    }
    case HTMLPreElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLPreElement"), value);
        break;
    }
    case HTMLQuoteElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLQuoteElement"), value);
        break;
    }
    case HTMLScriptElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLScriptElement"), value);
        break;
    }
    case HTMLSelectElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLSelectElement"), value);
        break;
    }
    case HTMLStyleElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLStyleElement"), value);
        break;
    }
    case HTMLTableCaptionElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTableCaptionElement"), value);
        break;
    }
    case HTMLTableCellElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTableCellElement"), value);
        break;
    }
    case HTMLTableColElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTableColElement"), value);
        break;
    }
    case HTMLTableElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTableElement"), value);
        break;
    }
    case HTMLTableRowElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTableRowElement"), value);
        break;
    }
    case HTMLTableSectionElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTableSectionElement"), value);
        break;
    }
    case HTMLTextAreaElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTextAreaElement"), value);
        break;
    }
    case HTMLTitleElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLTitleElement"), value);
        break;
    }
    case HTMLUListElementConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLUListElement"), value);
        break;
    }
    case HTMLCollectionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "HTMLCollection"), value);
        break;
    }
    case CanvasRenderingContext2DConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "CanvasRenderingContext2D"), value);
        break;
    }
    case EventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Event"), value);
        break;
    }
    case KeyboardEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "KeyboardEvent"), value);
        break;
    }
    case MouseEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "MouseEvent"), value);
        break;
    }
    case MutationEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "MutationEvent"), value);
        break;
    }
    case OverflowEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "OverflowEvent"), value);
        break;
    }
    case ProgressEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "ProgressEvent"), value);
        break;
    }
    case TextEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "TextEvent"), value);
        break;
    }
    case UIEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "UIEvent"), value);
        break;
    }
    case WheelEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "WheelEvent"), value);
        break;
    }
    case MessageEventConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "MessageEvent"), value);
        break;
    }
    case EventExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "EventException"), value);
        break;
    }
    case ClipboardConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Clipboard"), value);
        break;
    }
    case FileConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "File"), value);
        break;
    }
    case FileListConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "FileList"), value);
        break;
    }
    case NodeFilterConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "NodeFilter"), value);
        break;
    }
    case RangeConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "Range"), value);
        break;
    }
    case RangeExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "RangeException"), value);
        break;
    }
    case XMLDocumentConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "XMLDocument"), value);
        break;
    }
    case DOMParserConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "DOMParser"), value);
        break;
    }
    case XMLSerializerConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "XMLSerializer"), value);
        break;
    }
    case XMLHttpRequestExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "XMLHttpRequestException"), value);
        break;
    }
    case XPathEvaluatorConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "XPathEvaluator"), value);
        break;
    }
    case XPathResultConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "XPathResult"), value);
        break;
    }
    case XPathExceptionConstructorAttrNum: {
        if (!allowsAccessFrom(exec))
            return;
        // Shadowing a built-in constructor
        putDirect(Identifier(exec, "XPathException"), value);
        break;
    }
    }
}

void JSDOMWindow::getPropertyNames(ExecState* exec, PropertyNameArray& propertyNames)
{
    if (customGetPropertyNames(exec, propertyNames))
        return;
     Base::getPropertyNames(exec, propertyNames);
}

JSValue* jsDOMWindowPrototypeFunctionGetSelection(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());


    KJS::JSValue* result = toJS(exec, WTF::getPtr(imp->getSelection()));
    return result;
}

JSValue* jsDOMWindowPrototypeFunctionFocus(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());

    imp->focus();
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionBlur(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());

    imp->blur();
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionClose(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());

    imp->close();
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionPrint(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());

    imp->print();
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionStop(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());

    imp->stop();
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionAlert(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    const UString& message = args[0]->toString(exec);

    imp->alert(message);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionConfirm(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    const UString& message = args[0]->toString(exec);


    KJS::JSValue* result = jsBoolean(imp->confirm(message));
    return result;
}

JSValue* jsDOMWindowPrototypeFunctionPrompt(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    const UString& message = args[0]->toString(exec);
    const UString& defaultValue = valueToStringWithUndefinedOrNullCheck(exec, args[1]);


    KJS::JSValue* result = jsStringOrNull(exec, imp->prompt(message, defaultValue));
    return result;
}

JSValue* jsDOMWindowPrototypeFunctionFind(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    const UString& string = args[0]->toString(exec);
    bool caseSensitive = args[1]->toBoolean(exec);
    bool backwards = args[2]->toBoolean(exec);
    bool wrap = args[3]->toBoolean(exec);
    bool wholeWord = args[4]->toBoolean(exec);
    bool searchInFrames = args[5]->toBoolean(exec);
    bool showDialog = args[6]->toBoolean(exec);


    KJS::JSValue* result = jsBoolean(imp->find(string, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog));
    return result;
}

JSValue* jsDOMWindowPrototypeFunctionScrollBy(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    if (args.size() < 2)
        return jsUndefined();
    int x = args[0]->toInt32(exec);
    int y = args[1]->toInt32(exec);

    imp->scrollBy(x, y);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionScrollTo(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    if (args.size() < 2)
        return jsUndefined();
    int x = args[0]->toInt32(exec);
    int y = args[1]->toInt32(exec);

    imp->scrollTo(x, y);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionScroll(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    if (args.size() < 2)
        return jsUndefined();
    int x = args[0]->toInt32(exec);
    int y = args[1]->toInt32(exec);

    imp->scroll(x, y);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionMoveBy(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    if (args.size() < 2)
        return jsUndefined();
    float x = args[0]->toFloat(exec);
    float y = args[1]->toFloat(exec);

    imp->moveBy(x, y);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionMoveTo(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    if (args.size() < 2)
        return jsUndefined();
    float x = args[0]->toFloat(exec);
    float y = args[1]->toFloat(exec);

    imp->moveTo(x, y);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionResizeBy(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    if (args.size() < 2)
        return jsUndefined();
    float x = args[0]->toFloat(exec);
    float y = args[1]->toFloat(exec);

    imp->resizeBy(x, y);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionResizeTo(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    if (args.size() < 2)
        return jsUndefined();
    float width = args[0]->toFloat(exec);
    float height = args[1]->toFloat(exec);

    imp->resizeTo(width, height);
    return jsUndefined();
}

JSValue* jsDOMWindowPrototypeFunctionGetComputedStyle(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    Element* element = toElement(args[0]);
    const UString& pseudoElement = args[1]->toString(exec);


    KJS::JSValue* result = toJS(exec, WTF::getPtr(imp->getComputedStyle(element, pseudoElement)));
    return result;
}

JSValue* jsDOMWindowPrototypeFunctionGetMatchedCSSRules(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    if (!castedThisObj->allowsAccessFrom(exec))
        return jsUndefined();
    DOMWindow* imp = static_cast<DOMWindow*>(castedThisObj->impl());
    Element* element = toElement(args[0]);
    const UString& pseudoElement = args[1]->toString(exec);

    int argsCount = args.size();
    if (argsCount < 3) {

        KJS::JSValue* result = toJS(exec, WTF::getPtr(imp->getMatchedCSSRules(element, pseudoElement)));
        return result;
    }

    bool authorOnly = args[2]->toBoolean(exec);


    KJS::JSValue* result = toJS(exec, WTF::getPtr(imp->getMatchedCSSRules(element, pseudoElement, authorOnly)));
    return result;
}

JSValue* jsDOMWindowPrototypeFunctionPostMessage(ExecState* exec, JSObject*, JSValue* thisValue, const ArgList& args)
{
    JSDOMWindow* castedThisObj = toJSDOMWindow(thisValue);
    if (!castedThisObj)
        return throwError(exec, TypeError);
    return castedThisObj->postMessage(exec, args);
}


}
